
DEVICE SX28L, TURBO, STACKX, OSCHS2, OPTIONX
IRC_CAL IRC_FAST
FREQ 50_000_000
RESET start

Speed		equ	10
Ticks		equ	51

modTRIS		equ	$0f
modPULLUP 	equ	$0e
modLEVEL	equ	$0d
modSCHMITT	equ	$0c

OEPort0		equ	RA.0
OEPort1		equ	RA.1
OEPort2		equ	RA.2
OEPort3		equ	RA.3

flgMD		equ	RC.0


FLAGS		equ	$0a

flgSIGN		equ	FLAGS.7
flgFRAME	equ	FLAGS.6
flgCHASING	equ	FLAGS.5

randomno	equ	$0b
oprndsav	equ	$0c

fsrsav		equ	$0d
rtccTIKR	equ	$0e

oprnd		equ	$0f

Wait		equ	$10
PC0		equ	$11
PC1		equ	$12

LA		equ	$14
LB		equ	$15
LC		equ	$16
LD		equ	$17

wrk	equ	$18
wrk1	equ	$19
wrk2	equ	$1a

Headlite	equ	(LA-LA)*16+0
LetrW1G		equ	(LA-LA)*16+1	; G
LetrW1R		equ	(LA-LA)*16+2	; R
Bear2		equ	(LA-LA)*16+3

LetrW1A		equ	(LA-LA)*16+4	; A
LetrW1N		equ	(LA-LA)*16+5	; N
Bear1DO		equ	(LA-LA)*16+6
Bear1		equ	(LA-LA)*16+7


LetrW1D		equ	(LB-LA)*16+0	; D
LetrW1M		equ	(LB-LA)*16+1	; M
LetrW1A1	equ	(LB-LA)*16+2	; A
Present1	equ	(LB-LA)*16+3

LetrW1S		equ	(LB-LA)*16+4	; S
LetrW2O		equ	(LB-LA)*16+5	; O
LetrW2R		equ	(LB-LA)*16+6	; R
Present2	equ	(LB-LA)*16+7


LetrW3B		equ	(LC-LA)*16+0	; B
Bear3		equ	(LC-LA)*16+1
Bear3DO		equ	(LC-LA)*16+2
Bus1		equ	(LC-LA)*16+3

LetrW3U		equ	(LC-LA)*16+4	; U
Bear4		equ	(LC-LA)*16+5
Bear4DO		equ	(LC-LA)*16+6
Bus2		equ	(LC-LA)*16+7


LetrW3S		equ	(LD-LA)*16+0	; S
LetrW3T		equ	(LD-LA)*16+1	; T
;		equ	(LD-LA)*16+2
Bear5		equ	(LD-LA)*16+3

Chase1		equ	(LD-LA)*16+4
Chase2		equ	(LD-LA)*16+5
Chase3		equ	(LD-LA)*16+6
Bear6		equ	(LD-LA)*16+7






S	equ	$52
TS	equ	$53
D	equ	$54
TD	equ	$55
P	equ	$56


RTCC_ON = %10000000 ;Enables RTCC at address $01 (RTW hi)
;*WREG at address $01 (RTW lo) by default
RTCC_ID = %01000000 ;Disables RTCC edge interrupt (RTE_IE hi)
;*RTCC edge interrupt (RTE_IE lo) enabled by default
RTCC_INC_EXT = %00100000 ;Sets RTCC increment on RTCC pin transition (RTS hi)
;*RTCC increment on internal instruction (RTS lo)is default
RTCC_FE = %00010000 ;Sets RTCC to increment on falling edge (RTE_ES hi)
;*RTCC to increment on rising edge (RTE_ES lo) isdefault
RTCC_PS_ON = %00000000 ;Assigns prescaler to RTCC (PSA lo)
RTCC_PS_OFF = %00001000 ;Assigns prescaler to WDT (PSA hi)
PS_000 = %00000000 ;RTCC = 1:2, WDT = 1:1
PS_001 = %00000001 ;RTCC = 1:4, WDT = 1:2
PS_010 = %00000010 ;RTCC = 1:8, WDT = 1:4
PS_011 = %00000011 ;RTCC = 1:16, WDT = 1:8
PS_100 = %00000100 ;RTCC = 1:32, WDT = 1:16
PS_101 = %00000101 ;RTCC = 1:64, WDT = 1:32
PS_110 = %00000110 ;RTCC = 1:128, WDT = 1:64
PS_111 = %00000111 ;RTCC = 1:256, WDT = 1:128


;
;	ISR
;

isr	org	0
;
;	Set flgFRAME every Ticks ticks of the rtcc
;
	djnz	rtccTIKR,isrEND
	mov	rtccTIKR,#Ticks
	setb	flgFRAME

isrEND
	reti


sign
	sb	flgSIGN
	  ret

;		XEQ routine

xeq
	test	Wait
	jz	xeqOp
	decsz	Wait
	  ret
	jmp	xeqOp

;
;	Execute next command (Increment PC)
;	
xeqNxt
	call	xeqPCInc

;
;	Execute command @ PC0-PC1
;
xeqOp
	mov	m,PC0
	mov	w,PC1

	iread

	mov	oprnd,w
	mov	w,m

;
;	Jump table for parameterized commands
;
	jmp	pc+w
xeqTbl		equ	$
opWAIT		equ	($-xeqTbl)*256
		jmp	xeqWAIT
opON		equ	($-xeqTbl)*256
		jmp	xeqON
opOFF		equ	($-xeqTbl)*256
		jmp	xeqOFF
opSWAP		equ	($-xeqTbl)*256
		jmp	xeqSWAP
opEND		equ	($-xeqTbl)*256
		jmp	xeqEND
opRANDOMBUSTED	equ	($-xeqTbl)*256
		jmp	xeqRANDOMBUSTED

;		Add new parameterized opcodes here

opCMD		equ	($-xeqTbl)*256
		mov	w,oprnd

;
;	Jump table for non-parameterized commands
;
		jmp	pc+w
opCmdTbl	equ	$
opCHASEFWD	equ	opCMD+($-opCmdTbl)
		jmp	xeqCHASEFWD
opCHASEBWD	equ	opCMD+($-opCmdTbl)
		jmp	xeqCHASEBWD
opCHASESTOP	equ	opCMD+($-opCmdTbl)
		jmp	xeqCHASESTOP
opCHASEHALT	equ	opCMD+($-opCmdTbl)
		jmp	xeqCHASEHALT
opSIGNRIPPLE	equ	opCMD+($-opCmdTbl)
		jmp	xeqSIGNRIPPLE
opSIGNBUSTED	equ	opCMD+($-opCmdTbl)
		jmp	xeqSIGNBUSTED
opSIGNEND	equ	opCMD+($-opCmdTbl)
		jmp	xeqSIGNEND
opRANDOMBEAR	equ	opCMD+($-opCmdTbl)
		jmp	xeqRANDOMBEAR
opWAITMD	equ	opCMD+($-opCmdTbl)
		jmp	xeqWAITMD
opWAITCHASE	equ	opCMD+($-opCmdTbl)
		jmp	xeqWAITCHASE
opWAITSIGN	equ	opCMD+($-opCmdTbl)
		jmp	xeqWAITSIGN
opRESETBB	equ	opCMD+($-opCmdTbl)
		jmp	xeqRESETBB
opSETBB		equ	opCMD+($-opCmdTbl)
		jmp	xeqSETBB

;		Add new command (non-parameterized) opcodes here


;
;	Decode oprnd into fsr (containing a pointer to LA - LD) and w (containing bitmask) for given element
;
blbdec
	swap	oprnd
	mov	w,#$0f
	and	w,oprnd
	xor	oprnd,w
	or	w,#LA
	mov	fsr,w
	mov	w,<>oprnd
	call	blbdec1
	retp

;
;	decode index value in w (0-7) into bitmask in w (x01 - x80)
;
blbdec1
	jmp	pc+w
	retw	$01
	retw	$02
	retw	$04
	retw	$08
	retw	$10
	retw	$20
	retw	$40
	retw	$80

;
;	Increment PC
;
xeqPCInc
	inc	PC1
	snz
	  inc	PC0
	ret

randomer
	clr	wrk
	snb	randomno.0
	  inc	wrk
	snb	randomno.2
	  inc	wrk
	snb	randomno.3
	  inc	wrk
	snb	randomno.4
	  inc	wrk
	rr	wrk
	rr	randomno

	retp

hlpChaseHalt
	bank	$50
	clr	TS
	clr	S
	mov	TD,#'F'
	mov	D,#'F'
	mov	P,#Chase1
	clrb	flgCHASING

	mov	oprnd,#Chase1
	call	blbdec
	or	ind,w
	mov	oprnd,#Chase2
	call	blbdec
	or	ind,w
	mov	oprnd,#Chase3
	call	blbdec
	or	ind,w
	ret




;
;		Command implementations
;
;
;	Wait for specified #'frames
;
xeqWAIT
	mov	WAIT,oprnd
	call	xeqPCInc
	ret

;
;	Wait for motion detector (RC.0)
;
xeqWAITMD
	snb	flgMD
	  ret
	call	xeqPCInc
	ret

;
;	Wait for Chase to reach desired direction & speed
;
xeqWAITCHASE
	mov	fsrsav,fsr
	bank	$50
	cjne	S,TS,:continue
	cjne	D,TD,:continue

	mov	fsr,fsrsav
	jmp	xeqNxt

:continue
	mov	fsr,fsrsav
	ret

;
;	Wait for ripple command to terminate
;
xeqWAITSIGN
	jnb	flgSIGN,xeqNXT
	ret

;
;	Turn specified element ON
;
xeqON
	call	@hlpon
	jmp	xeqNxt

;
;	helper routine for xeqOn - turn specified element on
;
hlpOn
	mov	fsrsav,fsr
	mov	oprndsav,oprnd
	call	blbdec
	or	ind,w

	mov	oprnd,#Bear1DO
	cje	oprndsav,#Bear1,:off
	mov	oprnd,#Bear3DO
	cje	oprndsav,#Bear3,:off
	mov	oprnd,#Bear4DO
	cjne	oprndsav,#Bear4,:xit

:off
	call	blbdec
	or	ind,w
	xor	ind,w

:xit
	mov	fsr,fsrsav
	retp

;
;	Turn specified element off
;
xeqOFF	
	call	@hlpoff
	jmp	xeqNxt

;
;	helper routine for xeqOff - turn specified element off
;
hlpoff
	mov	fsrsav,fsr
	mov	oprndsav,oprnd

	call	blbdec
	or	ind,w
	xor	ind,w

	mov	oprnd,#Bear1DO
	cje	oprndsav,#Bear1,:on
	mov	oprnd,#Bear3DO
	cje	oprndsav,#Bear3,:on
	mov	oprnd,#Bear4DO
	cjne	oprndsav,#Bear4,:xit

:on
	call	blbdec
	or	ind,w

:xit
	mov	fsr,fsrsav
	retp

xeqSWAP	
	call	hlpswap
	jmp	xeqNxt

;
;	helper routine for xeqSWAP - toggle specified element on/off
;
hlpswap
	mov	fsrsav,fsr
	mov	oprndsav,oprnd

	call	blbdec
	xor	ind,w

	mov	oprnd,#Bear1DO
	cje	oprndsav,#Bear1,:swap
	mov	oprnd,#Bear3DO
	cje	oprndsav,#Bear3,:swap
	mov	oprnd,#Bear4DO
	cjne	oprndsav,#Bear4,:xit

:swap
	call	blbdec
	xor	ind,w

:xit
	mov	fsr,fsrsav
	retp


hlpTest
	mov	fsrsav,fsr
	call	blbdec
	and	w,ind
	jnz	hlpTest1

	mov	fsr,fsrsav
	stz
	ret

hlpTest1
	mov	fsr,fsrsav
	clz
	ret





;
;	Start ripple of Letters
;
xeqSIGNRIPPLE
	mov	fsrsav,fsr
	mov	fsr,#$30
	clr	Wait
	mov	PC0,#pgmRIPPLE/256
	mov	PC1,#pgmRIPPLE//256

	setb	flgSIGN
	mov	fsr,fsrsav
	jmp	xeqNxt

;
;	Start BUST flash
;
xeqSIGNBUSTED
	mov	fsrsav,fsr
	mov	fsr,#$30
	clr	Wait
	mov	PC0,#pgmBUSTED/256
	mov	PC1,#pgmBUSTED//256

	setb	flgSIGN
	mov	fsr,fsrsav
	jmp	xeqNxt

;
;	Stop SIGN Activity
;
xeqSIGNEND
	clrb	flgSIGN
	retp

;
;	Start chase forward
;
xeqCHASEFWD
	mov	fsrsav,fsr
	bank	$50
	mov	TD,#'F'
	mov	TS,#Speed

	mov	fsr,fsrsav
	jmp	xeqNxt

;
;	Start chase backward
;
xeqCHASEBWD
	mov	fsrsav,fsr
	bank	$50
	mov	TD,#'B'
	mov	TS,#Speed

	mov	fsr,fsrsav
	jmp	xeqNxt

;
;	Start chase stopping - decelerate to stop
;
xeqCHASESTOP
	mov	fsrsav,fsr
	bank	$50
	clr	TS

	mov	fsr,fsrsav
	jmp	xeqNxt

;
;	Halt chase
;
xeqCHASEHALT
	mov	fsrsav,fsr
	call	hlpChaseHalt
	mov	fsr,fsrsav
	jmp	xeqNxt

;
;	Select and turn on a random element
;
xeqRANDOMBEAR
random	MACRO	2
	mov	w,\2
	and	w,randomno
	jz	:byp

	mov	oprnd,#\1
	call	hlpTest
	jnz	:byp

	mov	oprnd,#\1
	call	hlpOn
	jmp	xeqNxt
:byp
	endm


xeqRANDOMBEAR1
	random	Bear3,#$02
	random	Bear4,#$04
	random	Present2,#$ff
	random	Bear5,#$20
	random	Bear6,#$40
	random	Present1,#$a5
	call	@randomer
	jmp	xeqRANDOMBEAR1


;
;	Randomly, decide on BUST or normal path
;
xeqRANDOMBUSTED
	mov	w,#$c8
	and	w,randomno
	jz	xeqNxt		

	add	PC1,oprnd
	snc
	  inc	PC0
	jmp	xeqOp

;
;	End of program - resets program counter to beginning
;
xeqEND
	sub	PC1,oprnd
	sc
	  dec	PC0
	jmp	xeqOp

;
;	All elements off
;
xeqRESETBB
	mov	fsrsav,fsr

	clrb	flgSIGN		; stop sign
	call	hlpChaseHalt	; stop chase
	mov	fsr,fsrsav

	clr	w
;		positionally dependent code
	skip

;
;	All elements On
;
xeqSETBB
	mov	w,#$ff
;		end of positionally dependent code

	mov	LA,w
	mov	LB,w
	mov	LC,w
	mov	LD,w
	jmp	xeqNXT


;		Start-up and main loop

start
	clr 	fsr			;Clear
:clrRAM					;.
	sb 	fsr.4			;.
	  setb 	fsr.3			;.
	clr 	ind			;.
	ijnz 	fsr,:clrRAM		;.   all ram

	mov	!OPTION,#RTCC_ON+RTCC_PS_ON+PS_110		; rtcc internal, prescaler = 256, rtcc interrupts on

	mode	modTRIS			;Setup for direction regs
	mov	!RA,#%00000000		;All outputs for RA
	mov	!RB,#%00000000		;All outputs for RB
	mov	!RC,#%00000001		;All outputs for RC

	mode	modPULLUP		;Setup for pull-up regs
	mov	w,#%11111111		;All pull-ups DISABLED=1
	mov	!RA,w			;.   for RA
	mov	!RB,w			;.   RB
	mov	w,#%11111110		;All pull-ups DISABLED=1	
	mov	!RC,w			;.   RC

	mode	modLEVEL		;Setup for read level regs
	mov	w,#%11111111		;All read levels TTL=1
	mov	!RA,w			;.   for RA
	mov	!RB,w			;.   RB
	mov	!RC,w			;.   RC

	mode	modSCHMITT		;Setup for schmitt trigger regs
	mov	w,#%11111111		;All schmitt triggers DISABLED=1
	mov	!RA,w			;.   for RA
	mov	!RB,w			;.   RB
	mov	!RC,w			;.   RC

	mov	RB,#%11111111		;All outputs on (RELAY OFF) for RB
	mov	RA,#%00001111		;All outputs on (Latch Enable on) for RA
	mov	RA,#%00000000		;All outputs on (Latch Enable off) for RA
	clr	RC

	bank	$10
	clr	Wait
	mov	PC0,#pgmMAIN/256
	mov	PC1,#pgmMAIN//256

	call	hlpChaseHalt

	bank	$10
	mov	rtccTIKR,#1
	mov	randomno,#1

xeqLOOP
xeqFRAME
	call	randomer

	jnb	flgFRAME,xeqFRAME

	clrb	flgFRAME
	
	bank	$10
	call	xeq
	bank	$30
	call	sign	
	bank	$50
	call	@CHASE

	bank	$10
	mov	w,/LA
	mov	RB,W
	setb	OEPort0
	clrb	OEPort0
	
	mov	w,/LB
	mov	RB,w
	setb	OEPort1
	clrb	OEPort1
	
	mov	w,/LC
	mov	RB,w
	setb	OEPort2
	clrb	OEPort2
	
	mov	w,/LD
	mov	RB,w
	setb	OEPort3
	clrb	OEPort3
	
	jmp	xeqLOOP





	org	$200




CHASE
	jb	flgCHASING,:chase1
	cjne	D,TD,:chase0
	cje	S,TS,:chasexit

;
;	starting...
:chase0
	setb	flgCHASING
	mov	D,TD
	mov	P,#Chase1
	mov	oprnd,#Chase3
	call	@hlpOff
	jmp	:chaseacc

;	running - check for WAIT in progress
:chase1
	test	wait
	jz	:chase1a
	djnz	wait,:chasexit

;	running - increment pointer if forward
:chase1a
	cjne	D,#'F',:chaseswp
	inc	P
	cjbe	P,#Chase3,:chaseswp
	mov	p,#Chase1

;	swap element at current P value
:chaseswp
	mov	oprnd,P
	call	@hlpSwap

;	decrement pointer if backward
	cjne	D,#'B',:chaseacc
	dec	P
	cjae	P,#Chase1,:chaseacc
	mov	P,#Chase3

;	running - handle ac/deceleration	
:chaseacc
	cjne	D,TD,:chasedwn		; different directions - must be slowing
	cje	S,TS,:chasestp		; same direction/speed - check for stopped
	cja	S,TS,:chasedwn		; same dir/different speed - check for speed up or down

;	accelerating...
:chaseup
	inc	S
	jmp	:chasewat

;	decelerating - reset direction once we're stopped
:chasedwn
	dec	S

	test	S
	jnz	:chasewat
	mov	D,TD

;	computer new wait value based on current s-peed value
:chasewat

;	compute wait time
	mov	w,S
	call	hlpwait
	mov	WAIT,w
	jmp	:chasexit

:chasestp
	test	TS
	jnz	:chasewat


	clrb	flgCHASING
	mov	oprnd,#Chase1
	call	@hlpOn
	mov	oprnd,#Chase2
	call	@hlpOn
	mov	oprnd,#Chase3
	call	@hlpOn

:chasexit
	retp

hlpwait
	jmp	pc+w
	retw	5
	retw	5
	retw	4
	retw	4
	retw	3
	retw	3
	retw	2
	retw	2
	retw	1
	retw	1
	retw	1

pgmMAIN
	dw	opRESETBB
	dw	opWAIT+90
	dw	opWAITMD
	dw	opRESETBB
	dw	opON+Bus1
	dw	opON+Bus2
	dw	opON+Bear1DO
	dw	opON+Bear3DO
	dw	opON+Bear4DO
	dw	opON+Chase1
	dw	opON+Chase2
	dw	opON+Chase3
	dw	opWait+60
	dw	opSIGNRIPPLE
	dw	opWAIT+60
	dw	opRANDOMBEAR
	dw	opWAIT+60
	dw	opRANDOMBEAR
	dw	opWAIT+60
	dw	opRANDOMBEAR
	dw	opWAIT+60
	dw	opRANDOMBEAR
	dw	opSIGNRIPPLE
	dw	opWAIT+60
	dw	opRANDOMBEAR
	dw	opWAIT+60
	dw	opON+Bear2
	dw	opWAIT+60
	dw	opON+Bear1
	dw	opWAIT+75
	dw	opOn+Headlite
	dw	opCHASEFWD
	dw	opWAITCHASE
	dw	opWAIT+90
	dw	opOFF+Bear2
	dw	opWAIT+5
	dw	opON+Bear2
	dw	opWAIT+3
	dw	opOFF+Bear2
	dw	opWAIT+3
	dw	opON+Bear2
	dw	opWAIT+3
	dw	opOFF+Bear2
	dw	opWAIT+3
	dw	opON+Bear2
	dw	opWAIT+3
	dw	opOFF+Bear2
	dw	opWAIT+3
	dw	opON+Bear2
	dw	opWAIT+3
	dw	opOFF+Bear2
	dw	opWAIT+3
	dw	opON+Bear2
	dw	opWAIT+3
	dw	opCHASEHALT
	dw	opWAIT+10
	dw	opCHASEBWD
	dw	opWAITCHASE
	dw	opWAIT+90
	dw	opCHASESTOP
	dw	opWAITCHASE
	dw	opWAIT+30
	dw	opOFF+Bear2
	dw	opWAIT+30
	dw	opON+Bear3
	dw	opON+Bear4
	dw	opON+Bear5
	dw	opON+Bear6
	dw	opON+Present1
	dw	opON+Present2
	dw	opWAIT+10
	dw	opON+Bear2
	dw	opWAIT+20
	dw	opCHASEFWD
	dw	opWAITCHASE
	dw	opSIGNRIPPLE
	dw	opWAIT+90
;	dw	opWAIT+150
;	dw	opRIPPLE
	dw	opWAIT+50

	dw	opRANDOMBUSTED+(pgmNoBust-$)

	dw	opSIGNBUSTED
	dw	opCHASESTOP
	dw	opWAITCHASE


pgmNoBust
	dw	opWait+100
	dw	opEND+($-pgmMAIN)




pgmRIPPLE
	dw	opOFF+LetrW1G
	dw	opWAIT+4
	dw	opON+LetrW1G
	dw	opWAIT+4
	dw	opOFF+LetrW1R
	dw	opWAIT+4
	dw	opON+LetrW1R
	dw	opWAIT+4
	dw	opOFF+LetrW1A
	dw	opWAIT+4
	dw	opON+LetrW1A
	dw	opWAIT+4
	dw	opOFF+LetrW1N
	dw	opWAIT+4
	dw	opON+LetrW1N
	dw	opWAIT+4
	dw	opOFF+LetrW1D
	dw	opWAIT+4
	dw	opON+LetrW1D
	dw	opWAIT+4
	dw	opOFF+LetrW1M
	dw	opWAIT+4
	dw	opON+LetrW1M
	dw	opWAIT+4
	dw	opOFF+LetrW1A1
	dw	opWAIT+4
	dw	opON+LetrW1A1
	dw	opWAIT+4
	dw	opOFF+LetrW1S
	dw	opWAIT+4
	dw	opON+LetrW1S
	dw	opWAIT+12
	dw	opOFF+LetrW2O
	dw	opWAIT+4
	dw	opON+LetrW2O
	dw	opWAIT+4
	dw	opOFF+LetrW2R
	dw	opWAIT+4
	dw	opON+LetrW2R
	dw	opWAIT+12
	dw	opOFF+LetrW3B
	dw	opWAIT+4
	dw	opON+LetrW3B
	dw	opWAIT+4
	dw	opOFF+LetrW3U
	dw	opWAIT+4
	dw	opON+LetrW3U
	dw	opWAIT+4
	dw	opOFF+LetrW3S
	dw	opWAIT+4
	dw	opON+LetrW3S
	dw	opWAIT+4
	dw	opOFF+LetrW3T
	dw	opWAIT+4
	dw	opON+LetrW3T
	dw	opWAIT+4
	dw	opSIGNEND

pgmBUSTED
	dw	opOFF+LetrW1G
	dw	opOFF+LetrW1R
	dw	opOFF+LetrW1A
	dw	opOFF+LetrW1N
	dw	opOFF+LetrW1D
	dw	opOFF+LetrW1M
	dw	opOFF+LetrW1A1
	dw	opOFF+LetrW1S
	dw	opOFF+LetrW2O
	dw	opOFF+LetrW2R

pgmBUSTLOOP
	dw	opWAIT+8
	dw	opSWAP+LetrW3B
	dw	opSWAP+LetrW3U
	dw	opSWAP+LetrW3S
	dw	opSWAP+LetrW3T
	dw	opEND+($-pgmBUSTLOOP)

pgmCHASE
	dw	opSwap+Chase1
	dw	opSwap+Chase2
	dw	opSwap+Chase3


	org	$400
	end