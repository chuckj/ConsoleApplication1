
DEVICE SX18L, TURBO, STACKX, OSCHS2
IRC_CAL IRC_FAST
FREQ 50_000_000
RESET start


featureSize	equ	5000/20		;5000 ns / 20 ns (clock time for SX @ 50MHz)

modTRIS		equ	$0f
modPULLUP 	equ	$0e
modLEVEL	equ	$0d
modSCHMITT	equ	$0c

DO	equ	RA.0

	org	$08
timo	ds	1			;time out down counter

addr	ds	1
inten	ds	1
g	ds	1
b	ds	1
r	ds	1

byte	ds	1
bits	ds	1

randomno	ds	1
wrk	ds	1

clrtimr	ds	1
clrtim2	ds	1
clrndx	ds	1

rx1	ds	1
gx1	ds	1
bx1	ds	1

rx2	ds	1
gx2	ds	1
bx2	ds	1


RTCC_ON = %10000000 ;Enables RTCC at address $01 (RTW hi)
;*WREG at address $01 (RTW lo) by default
RTCC_ID = %01000000 ;Disables RTCC edge interrupt (RTE_IE hi)
;*RTCC edge interrupt (RTE_IE lo) enabled by default
RTCC_INC_EXT = %00100000 ;Sets RTCC increment on RTCC pin transition (RTS hi)
;*RTCC increment on internal instruction (RTS lo)is default
RTCC_FE = %00010000 ;Sets RTCC to increment on falling edge (RTE_ES hi)
;*RTCC to increment on rising edge (RTE_ES lo) isdefault
RTCC_PS_ON = %00000000 ;Assigns prescaler to RTCC (PSA lo)
RTCC_PS_OFF = %00001000 ;Assigns prescaler to WDT (PSA hi)
PS_000 = %00000000 ;RTCC = 1:2, WDT = 1:1
PS_001 = %00000001 ;RTCC = 1:4, WDT = 1:2
PS_010 = %00000010 ;RTCC = 1:8, WDT = 1:4
PS_011 = %00000011 ;RTCC = 1:16, WDT = 1:8
PS_100 = %00000100 ;RTCC = 1:32, WDT = 1:16
PS_101 = %00000101 ;RTCC = 1:64, WDT = 1:32
PS_110 = %00000110 ;RTCC = 1:128, WDT = 1:64
PS_111 = %00000111 ;RTCC = 1:256, WDT = 1:128


	org	0



converttomask
	jmp	pc+w
converttbl	equ	$
B0	equ	16*($-converttbl)
	retw	$01
B1	equ	16*($-converttbl)
	retw	$02
B2	equ	16*($-converttbl)
	retw	$04
B3	equ	16*($-converttbl)
	retw	$08
B4	equ	16*($-converttbl)
	retw	$10
B5	equ	16*($-converttbl)
	retw	$20
B6	equ	16*($-converttbl)
	retw	$40
B7	equ	16*($-converttbl)
	retw	$80

dtatbl
	jmp	pc+w

	retw	RA+B1
	retw	RA+B2
	retw	RA+B3

	retw	RB+B0
	retw	RB+B1
	retw	RB+B2
	retw	RB+B3
	retw	RB+B4
	retw	RB+B5
	retw	RB+B6
	retw	RB+B7

	retw	RC+B0
	retw	RC+B1
	retw	RC+B2
	retw	RC+B3
	retw	RC+B4
	retw	RC+B5
	retw	RC+B6
	retw	RC+B7

hlpaddr
	jmp	pc+w
	retw	0
	retw	5
	retw	10
	retw	15
	retw	6
	retw	1
	retw	16
	retw	11
	retw	2
	retw	57
	retw	12
	retw	17
	retw	8
	retw	3
	retw	18
	retw	13
	retw	4
	retw	9
	retw	14
	retw	19

sendalt
	mov	w,addr
	call	hlpaddr
	skip
send
	mov	w,addr

	mov	byte,w
	call	send6bits
	mov	byte,inten
	call	send8bits
	mov	byte,b
	call	send4bits
	mov	byte,g
	call	send4bits
	mov	byte,r
	call	send4bits
	setb	DO
	call	wait5us
	clrb	DO
	mov	bits,#30*3
:idle
	call	wait5us
	djnz	bits,:idle
	ret
	
send4bits
	mov	bits,#4
	swap	byte
	jmp	sendbits

send6bits
	mov	bits,#6
	rl	byte
	rl	byte
	jmp	sendbits

send8bits
	mov	bits,#8

sendbits
	setb	DO
	call	wait5us
	clrb	DO
	call	wait5us
	rl	byte
	sc
	  setb	DO
	call	wait5us
	djnz	bits,sendbits
	ret

;     		 flg[t] = true;
;                l++;
;                int z = ((t >> 3) ^ (t >> 4) ^ (t >> 2) ^ (t >> 0)) & 1;
;                t = (byte)((t >> 1) | (z * 0x80));

randomer
	clr	wrk
	snb	randomno.0
	  inc	wrk
	snb	randomno.2
	  inc	wrk
	snb	randomno.3
	  inc	wrk
	snb	randomno.4
	  inc	wrk
	rr	wrk
	rr	randomno
	
	retp

wait5us
	mov	timo,#243/(14+7)
:lup
	jmp	$+1
	jmp	$+1
	jmp	$+1
	jmp	$+1
	jmp	$+1
	jmp	$+1
	djnz	timo,:lup
	ret

wait1ms
	mov	bits,#200
:lup
	call	wait5us
	djnz	bits,:lup
	ret

wait12ms
	mov	byte,#12
	jmp	waitms

wait40ms
	mov	byte,#40
	jmp	waitms

wait100ms
	mov	byte,#100
waitms
	call	wait1ms
	djnz	byte,waitms
	ret



START
	clr 	fsr			;Clear
:clrRAM					;.
	sb 	fsr.4			;.
	  setb 	fsr.3			;.
	clr 	ind			;.
	ijnz 	fsr,:clrRAM		;.   all ram

	mode	modTRIS			;Setup for direction regs
	mov	!RA,#%00000000		;All outputs EXCEPT RA.0
	mov	!RB,#%00000000		;All outputs for RB
	mov	!RC,#%00000000		;All outputs for RC

	mode	modPULLUP		;Setup for pull-up regs
	mov	w,#%11111111		;All pull-ups DISABLED=1
	mov	!RA,w			;.   for RA
	mov	!RB,w			;.   RB
	mov	!RC,w			;. & RC

	mode	modLEVEL		;Setup for read level regs
	mov	w,#%11111111		;All read levels TTL=1
	mov	!RA,w			;.   for RA
	mov	!RB,w			;.   RB
	mov	!RC,w			;. & RC

	mode	modSCHMITT		;Setup for schmitt trigger regs
	mov	w,#%11111111		;All schmitt triggers DISABLED=1
	mov	!RA,w			;.   for RA
	mov	!RB,w			;.   RB
	mov	!RC,w			;. & RC

	mov	RA,#%00001110		;All outputs on (RELAY OFF) EXCEPT RA.0
	mov	RB,#%11111111		;All outputs on (RELAY OFF) for RB
	mov	RC,#%11111111		;All outputs on (RELAY OFF) for RC

	mov	randomno,#1

waitawhile
	mov	addr,#15
:waitlup
	call	wait100ms
	djnz	addr,:waitlup

candleenum
	clr	addr
	clr	inten
	mov	w,#$0f
	mov	r,w
	mov	g,w
	mov	b,w

:lup
	call	send

	inc	addr
	cjb	addr,#20,:lup

caneson
	clr	addr
	mov	inten,#$ff

:canelup
	call	wait100ms

	call	send

	cja	addr,#18,flickerstart

	call	wait100ms

	mov	w,addr
	call	dtatbl

	mov	byte,w
	and	w,#$0f
	xor	byte,w
	mov	fsr,w

	mov	w,<>byte
	call	converttomask

	or	ind,w
	xor	ind,w

:candleon

	inc	addr
	jmp	:canelup

flickerstart
	clr	clrndx

candleflicker

:newclr
	mov	w,clrndx
	jmp	pc+w
	jmp	:clrwht
	jmp	:clrred
	jmp	:clrredwht
	jmp	:clrorg
	jmp	:clrredgrn
	clr	clrndx
	jmp	:newclr

:clrwht
	mov	w,#$0f
	mov	rx1,w
	mov	gx1,w
	mov	bx1,w
	mov	rx2,w
	mov	gx2,w
	mov	bx2,w
	jmp	:getclr

:clrredwht
	mov	w,#$0f
	mov	rx1,w
	mov	gx1,w
	mov	bx1,w
	jmp	:clrredalt

:clrredgrn
	clr	rx1
	mov	gx1,#$0f
	clr	bx1
	jmp	:clrredalt

:clrred
	clr	gx1
	clr	bx1
	mov	rx1,#$0f

:clrredalt
	clr	gx2
	clr	bx2
	mov	rx2,#$0f
	jmp	:getclr

:clrorg
	mov	gx1,#3
	clr	bx1
	mov	rx1,#$0f
	mov	gx2,#4
	clr	bx2
	mov	rx2,#$0f

:getclr
	inc	clrndx
	mov	clrtim2,#2
	mov	clrtimr,#240

:lup
	clr	addr

:flickerlup
	call	randomer	
	cjb	randomno,#$40,:flickerlup
	mov	inten,randomno

	jb	addr.0,:odd
	mov	r,rx1
	mov	g,gx1
	mov	b,bx1
	jmp	:clrset

:odd
	mov	r,rx2
	mov	g,gx2
	mov	b,bx2

:clrset
	call	send

	call	wait1ms
	call	wait1ms
	call	wait1ms
	call	wait1ms
	call	wait1ms

	inc	addr
	cjb	addr,#20,:flickerlup

	djnz	clrtimr,:lup
	djnz	clrtim2,:lup
	jmp	candleflicker
